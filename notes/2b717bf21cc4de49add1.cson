createdAt: "2018-02-12T10:20:08.395Z"
updatedAt: "2019-03-23T09:24:33.953Z"
type: "MARKDOWN_NOTE"
folder: "624499bc0700af893dfe"
title: "grep"
content: '''
  # grep
  
  #### grep useful commands
  Do the following:
  
  `grep -rnw '/path/to/somewhere/' -e 'pattern'`
  - -r or -R is recursive,
  - -n is line number, and
  - -w stands for match the whole word.
  - -l (lower-case L) can be added to just give the file name of matching files.
  Along with these, --exclude, --include, --exclude-dir flags could be used for efficient searching:
  
  This will only search through those files which have .c or .h extensions:
  
  `grep --include=\\*.{c,h} -rnw '/path/to/somewhere/' -e "pattern"`
  This will exclude searching all the files ending with .o extension:
  
  `grep --exclude=*.o -rnw '/path/to/somewhere/' -e "pattern"`
  For directories it's possible to exclude a particular directory(ies) through --exclude-dir parameter. For example, this will exclude the dirs dir1/, dir2/ and all of them matching *.dst/:
  
  `grep --exclude-dir={dir1,dir2,*.dst} -rnw '/path/to/somewhere/' -e "pattern"`
  This works very well for me, to achieve almost the same purpose like yours.
  
  `grep -A 3`: get three line after
  `grep -B 3`: get three line before
  `grep -C 3`: get three line after and before
  
  For more options check man grep.
  
  
'''
tags: []
isStarred: false
isTrashed: false
linesHighlighted: []
