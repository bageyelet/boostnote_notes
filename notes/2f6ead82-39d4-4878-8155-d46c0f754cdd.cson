createdAt: "2019-03-14T13:26:37.092Z"
updatedAt: "2019-03-15T11:49:59.297Z"
type: "MARKDOWN_NOTE"
folder: "7180c251cc0f0c61d2d1"
title: "2 - Data Dependencies"
tags: []
content: '''
  # 2 - Data Dependencies
  
  Se potessimo dispatchare più unità contemporaneamente, l'ordine relativo delle istruzioni potrebbe cambiare.
  ![5e5d35c4.png](:storage/2f6ead82-39d4-4878-8155-d46c0f754cdd/5e5d35c4.png)
  **NOTA**: la dipendenza è una proprietà del programma, gli hazard sono quello che viene generato dalle dipendenze ma dipendono dall'organizzazione della pipeline.
  
  _RAW_ è detta _true dependency_. Se abbiamo una dipendenza _RAW_ non possiamo riordinare le istruzioni ma dobbiamo necessariamente _stallare_ la CPU.
  _WAW_ e _WAR_ sono _false dependencies_. Si possono evitare _rinominando_ i registri che coinvolgono l'hazard. 
  EX - WAW risolta _rinominando_ il registro:
  ![4ee00c7a.png](:storage/2f6ead82-39d4-4878-8155-d46c0f754cdd/4ee00c7a.png)
  
  Considerando una _RAW_:
  - l'update del registro è fatto nella fase di Write-Back (WB)
  - può essere prodotto:
    - durante la fase di Execution (EX) se è una operazione aritmetica 
    - durante MEM se è una load da memoria
  
  in questo scenario, la penalità è di 2 cicli. Perché la CPU viene stallata da ID (momento nel qualche la pipeline si rende conto che il valore su cui deve scrivere sta venendo letto da qualcun altro) fino alla fase di WB
  
  ### Forwarding
  [Forwarding](http://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/forward.html)
  Per ridurre la penalità, possiamo implementare uno schema basato sul forwarding:
  - Il dato viene passato non appena è disponibile _prima_ di essere disponibile nel register file (WB)
  
  ##### EX/EX forwarding
  - Il collegamento tra EX e MEM fornisce il risultato al prossimo stadio EX
  - Risolve il caso di operazioni aritmetiche a distanza 1
  ##### MEM/EX forwarding
  - Il collegamento tra MEM e WB fornisce il valore per il prossimo stadio EX
  - Risolver il caso di operazioni aritmetiche a distanza 2
  ##### MEM/MEM forwarding
  - Il collegamento MEM/WB fornisce il valore per il prossimo statio MEM
  - Risolver il caso di load seguite da load/store
  ![28cbc3b9.png](:storage/2f6ead82-39d4-4878-8155-d46c0f754cdd/28cbc3b9.png)
  
  #### Limitazioni MIPS
  ##### Load-use data hazard
  ![e5c87fcb.png](:storage/2f6ead82-39d4-4878-8155-d46c0f754cdd/e5c87fcb.png)
  - Una load in WB non può essere forwardata verso una operazione non in memoria in EX
  - Stallo 1 ciclo
  - Perché il risultato della load ce l'ho in MEM, mentre una operazione aritmetica ha bisogno del valore in EX
  
  ##### Early branch data hazard
  ![063677ed.png](:storage/2f6ead82-39d4-4878-8155-d46c0f754cdd/063677ed.png)
  - Una non-load in MEM non può essere forwardata verso un early branch in ID
  - Stallo 1 ciclo
  - Perché la branch ha bisogno del risultato della non-load per capire quale branch prendere
  
  ##### Load-use data hazard + Early branch data hazard
  ![13d7be31.png](:storage/2f6ead82-39d4-4878-8155-d46c0f754cdd/13d7be31.png)
  - Una load in WB non può essere fowardata verso un early branch in ID
  - Stallo 2 cicli
  - Perché la branch ha bisogno del risultato della load per capire quale branch prendere
  
  ### Instruction scheduling
  Provo a riordinare le istruzioni mantenendo le dipendenze di data-flow
  - **Static instruction scheduling**
    - Compiler-assisted (non discusso)
  - **Dynamic instruction scheduling**
    - Hardware-assisted
  
  ---
  ### Dynamic instruction scheduling
  ![e48fdc00.png](:storage/2f6ead82-39d4-4878-8155-d46c0f754cdd/e48fdc00.png)
  Una pipeline _in-order_ esegue le istruzioni usando l'ordine del programma
  Una pipeline _out-of-order_ può rilassare questa assunzione:
  - Le istruzioni sono fetchate e decodificate in-order (in-order issue)
  - Le istruzioni sono eseguite out-of-order (out-of-order execution)
  - Le istruzioni possono completare out-of-order (out-of-order commit) (? differenza con immagine che ha fatto in aula)
  
  5 stadi principali:
  - **Fetch**: carica istruzioni da una coda
  - **Issue**: decodifica le istruzioni, verifica se ci sono hazard strutturali o sui dati
  - **Read**:  aspetta eventuali data-hazards, poi leggi gli operandi
  - **Execute**: esegui l'istruzione sull'unità funzionale disponibile
  - **Write Result**: Scrivi i risultati in memoria e/o in un register file
  
  I data hazard che possono verificarsi sono _RAW_, _WAW_ e _WAR_, come discusso prima.
  
  Due tecniche principali per l'esecuzione out-of-order:
  - **Scoreboarding**
    - Esegue out-of-order quando non ci sono hazard sui dati o strutturali
    - False dependencies trattate come True dependencies (stallando)
  - **Tomasulo Algorithm**
    - False dependencies eliminate
  
  ## Tomasulo's Algorithm
  [YouTube](https://www.youtube.com/watch?v=jyjE6NHtkiA)
  ![d1110263.png](:storage/2f6ead82-39d4-4878-8155-d46c0f754cdd/71b82ca7.png)
  ![af90959a.png](:storage/2f6ead82-39d4-4878-8155-d46c0f754cdd/11d6e4c9.png)
  ![e983cc97.png](:storage/2f6ead82-39d4-4878-8155-d46c0f754cdd/56ef1801.png)
  Sviluppato da un ingegnere della IBM. L'obiettivo era quello di avere buone performance sulle opeazioni sui floating-point considerando che:
  - L'architettura dell'epoca (IBM 360) aveva solo 4 registri per i floating-point (FP), i.e., riutilizzo dei registri molto frequente -> False Dependencies
  - Accessi a memoria lenti, operazioni su FP onerose
  
  L'algoritmo di Tomasulo risolve questi problemi:
  - Il numero limitato di registri è espanso usando "register renaming"
  - I lunghi delay sono mascherati utilizzando processamenti out-of-order
  
  **NOTA**: Il common data bus (CDB) è la chiave del funzionamento dell'algoritmo: è il mezzo di comunicazione che connette ogni componente.
  ##### Fetch and Issue
  - Una Instruction Queue (IQ) mantiene le istruzioni fetchate
  - Le istruzioni lasciano la IQ in ordine di programma (mantenendo dipendenze di controllo e sui dati)
  - Non appena lascia la IQ, l'istruzione viene decodificata
    - La functional unit corretta viene scelta per processare l'istruzione. Se la functional unit è occupata, stallo la IQ (structural hazard)
    - Il Register File (RF) è acceduto in modalità read/write (per prendere i parametri e per notificare il RF quali registri saranno scritti)
  
  - Ogni unità funzionale ha una o più Reservation Station (RS)
    - Un singola RS mantiene una istruzione con i suoi operandi da leggere
    - Si preoccupa delle True Data Dependencies per quella istruzione
    - Se il dato non è disponibile (perché sta venendo processato da un'altra RS), viene mantenuto l'ID della RS che produrrà il risultato
  
  ##### Read and execute
  - Una volta dispatchate, le istruzioni attendono nelle Reservation Stations di fronte alle unità funzionali (in figura sono 2: una per moltiplicare i FP, una per dividerli).
    - Aspettano la disponibilità degli operandi derivanti da istruzioni concorrnti che causano data dependencies
  - La RS monitora i risultati che sono prodotti da tutte le unità funzionali usando il Common Data Bus (CDB). Non appena un operando è disponibile, il risultato viene scritto nella RS.
  - Quando tutti gli operandi sono disponibili per una istruzione, questa può essere processata. Se più RS sono pronte, prendine una
  
  ##### Write Result
  - Notifica la produzione di un risultato annunciandolo sul CDB (se disponibile)
    - Le RS che aspettavano il risultato lo ricevono nel prossimo ciclo CPU (1-clock latency)
  - Libera la RS che contiene l'istruzione completata
  - Salva il risultato nel RF (che ascolta sul CDB)
  
  ##### Memory hazards
  Le load e le store possono essere fatte out-of-order ma solo se si riferiscono a indirizzi diversi
  - Le load devono aspettare le store verso lo stesso indirizzo
  - Le store devono aspettare le load e le store verso lo stesso indirizzo
  
  Per stabilire la presenza di un memory hazard, l'Effective Address (EA) di ogni load/store deve essere noto. 
  L'indirizzo è calcolato dopo aver valutato una espressione, e.g. in x86 `MOV %eax, TAB(%ecx, $4)`.
  
  **NOTA** Per produrre un EA bisogna aspettare che i valori dei registri sono disponibili. Ma che succede se una store precede una load nel programma con lo stesso EA, ma la computazione dell'EA della load viene prima di quello della store?
  
  ##### Load/Stores
  - Utilizzo di buffer appositi per il calcolo delgli EA
    - Ogni buffer mantiene le componenti degli EA finche il calcolo non è completato
    - Una volta completato il calcolo, eventuali memory hazard sono verificati (stall possibile)
    - Load/Store lasciano il buffer in program order
  - Le load fanno un check di memory hazard nello store buffer:
    - Se non ci sono conflitti, procede a un load buffer
    - Altrimenti, aspetta che la store completi (oppure la store fa il forward del valore, se conosciuto)
  - Le store fanno un check di memory hazard nei load e store buffers
  
  **NOTA** concettualmente, i Load e Store buffers sono come delle Reservation Stations.
  
  ##### Register Renaming
  - Rimpiazzare gli operandi con gli ID della RS è una forma di _register renaming_
  - Questo evita di dover gestire WAW e WAR hazards
  
  **NOTA** Lo schema di Tomasulo rechiede un hardware complesso (RS e CDB) ma è stato molto utilizzato per via della sua flessibilità.
  **NOTA** In uno schema out-of-order, le eccezioni possono essere lanciate out-of-order. Però questo non deve permettere che eccezioni appartenenti a diversi execution path siano lanciate per via di esecuzioni speculative non corrette.
  
  ##### Branches
  Non si possono riordinare istruzioni che appartengono a branch diversi:
  - Possono creare data dependencies dovute al riordinamento
  - E' possibile che vengano lanciate eccezioni su branch che non sono stati presi (ma solo speculativi)
  
  Nell'algoritmo di Tomasulo, dobbiamo stallare la CPU se ci sono control dependencies:
  - Le istruioni dopo un branch di cui non si sa l'outcome sono stallate nello stadio Issue
  - Una volta che l'outcome è noto, si può ricominciare sul branch taken (possibilmente flushando delle istruzioni dall'Instruction Queue IQ)
  
  ##### Hardware-based speculation
  Richiede una modifica significativa all'algoritmo di Tomasulo
  Esecuzione delle istruzioni prima che l'outcome di un evento è noto:
  -  Specula sull'outcome di un evento (predizione dei branch)
  -  Esegui istruzioni speculativamente come se fossero corrette
  -  Se la speculazione era sbagliata, fai rollback
  
  ##### Tomasulo + speculation
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
