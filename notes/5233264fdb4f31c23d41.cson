type: "MARKDOWN_NOTE"
folder: "624499bc0700af893dfe"
title: "Unix Shell Commands"
content: '''
  # Unix Shell Commands
  ### Basic commands
  `ls`: shows the content of current directory. Common options 
    - `-l` long format
    - `-a` display files which start with dot (.) (hidden files)
  
  `pwd`: present working directory, show the path of the current directory
  `cd path`: change directory to path
  `cat file`: print the file on stdout, if more files are secified, then their content is cocatenated
  `echo "string"`: print on stdout the string. Common options:
    - `-n` do not print newline after the string
    - `-e` accept special characters such as \\n
  
  `diff file1 file2` show differences between file1 and file2
  `git diff file1 file2` similar as before
  `grep "regular-expression" fiename`: print on stdout the lines which match the regular expression. Common options
    - `-o` print only match, no context
    - `-h` do not print filenames
  
  `cmd | tee file`: duplicate the output of cmd writing it both on screen (stdout) and on file
  `man command`: show the documentation for the command
  `mkdir path/dir`: create the directory dir in path
  `cp path1/f1 path2`: copy f1 to path2
  `mv path1/f1 path2`: move f1 to path2, used also to rename a file
  `rm file`: delete file, with -r delete a directory (and its content!)
  `touch path/filename`: create a file in path (or check for the existence of the file)
  `wc file`: print info about the file. Common options
    - `-l` print the number of lines
    - `-w` print the number of words
  
  `ln path1/origin path2/destination`: create an hard-link (soft-link with option -s) of file origin with name destination. An hard link will persist even if the origin is deleted, a soft link will not
  `sort namefile`: print on stdout the content of namefile with each lines in alphabetical order
  `find path -name filename`: find in path the file filename (also metacharacters allowed, such as \\* or .)
  `file filename`: info about filename
  `du filename`: estimate space usage of filename
  `cal`: print the calendar
  `who`: info about the current shell
  `whoami`: my name
  `uname -a`: info about the machine
  `nc -l -p 1234`: open a tcp server which listen on port 1234
  `ssh user@domain -p port`: ssh connection with domain
  `scp /path/to/local/file user@domain:/path/to/server`: send a file to server. `-l *Kbit/s*` to limit brandwidth
  `usermod -a -G group user`: add user _user_ to group _group_
  `addr2line 0x40123 -e /path/to/exe`: print the line of code which correspond to the address. The executable must have been compiled with debug info
  `netstat -natp`: list all open connections
  
  ---
  ##### tr
  Useful command to manipulate strings (translate or delete characters).
  `tr ' ' ';'` transform each space with a semicolon. The input is either given with stdin but can be redirected with a pipe `|` or a file redirect `<`
  `tr -s ','` delete all the occurences of the comma.
  ##### cut
  Print selected parts of lines from each file in input to stdout. Common options:
    - `-d` select the delimiter (if not set, the default delim is TAB)
    - `-f` choose the field between delimiters
    - `-s` print only the lines which have a delimiter
    - `-c` select only the characters listed (no delimiter, no fields!)
  
  ex
  `echo "ciao,ciao,bambina" | cut -d ',' -f1,3` prints *ciao,bambina*
  `echo "abcdef" | cut -c1,5` prints *ae*
  ##### sed
  It is a very powerful tool for text transformation. The transformation will be applied in sequence and are divided by a semicolon `;`. By default sed will print the result after _all_ commands are executed. If we want to not print by defaut, we can use the flag `n`.
  ex
  `sed '1d' filename` delete the first line of filename
  `sed '1,3d' filename` delete the first and the third line of filename
  `sed -n '1p' filename` print the first line of filename. Note that `-n` is reqired! without that, sed will print _every_ line of the file but the first line, which is printed twice.
  `sed 's/dino/mino/' filename` delete the _first_ occurrence of dino in mino. To delete _all_ he occurrence we can add a `g` at the end of the command. If we add `i` the substitution is case insensitive, if we add a number, we will substitute only the first n occurrences.
  `sed 's/dino/mino/g'`
  `sed 's/dino/mino/i3'`
  `sed -n '/dino/p' filename` print the lines which contain dino
  `sed '/dino/d' filename` delete the lines which contain dino
  `sed '6,7s/dino/mino/' filename` substitute dino with mino at 6th and 7th rows
  `sed 's/fox/coati/;s/dog/dingo/' filename` substitute fox with coati and dog with dingo
  `sed -n 's/fox/coat/;p;s/dog/dingo/' filename` substitute _only_ fox with coat! due to `-n` and the lack of `p` at the end, the second transformation will not be printed
  `sed -n 's/fox/coat/;p;s/dog/dingo/;p' filename` as before, but prints each line twice! one with the first substitution and the second with both substitutions
  `sed -n 's/fox/coat/;s/dog/dingo/;p' filename` print with both substitutions (as the one without `-n`)
  `sed '/^$/d'`: delete empty lines
  `sed -e '/*.html/ y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/` all the lines which is compliant with the regular expression, will be transformed in capital letters.
  `cat /etc/passwd | sed 's/\\([a-z_]\\)\\:.*/\\1/gi'` print users in /etc/passwd
  
  _note_ sed supports regular expressions!
  
  `sed 's/Dear \\([^ ]*\\) .*$/Name = \\1/g'` substitute Dear _somename_ with Name = _somename_. Note that it is possible to refer to a matched substring with `\\1` when it is sorrounded by brackets `()`, if we have more blocks, than we can refer to blocks with `\\2`, `\\3`, ...
  `sed 's/world/hello &/g'` with `&` we can perform find-and-replace. The example will add hello just before world! (`&` refers to the matched substring).
  `sed 's/\\(world\\)/hello \\1/g'` is absolutely equivalent to the previous one.
  
  ---
  
  ##### rename
  `rename` works just like sed, but modifies filenames. In rename, `(` doesn't need the backslash!!! Furthermore, `&` doesn't exist and `\\1, \\2, ecc` are substituted with `$1, $2, ecc`.
  ex: `rename 's/(.*)/$1.txt/' *` add `.txt` to all file in cwd.
  ex: `rename 's/([123])\\.(.*)/$1_WELLA_$2/' *` all file that begins with 1, 2 or 3 followed by a dot, are sobstituted with the same name with dot sobstituted with `_WELLA_`. `2.ciaociaozz` -> `2_WELLA_ciaociaozz`
  
  ---
  
  ##### pipe
  Used to pass values between programs. `cmd1 | cmd2` will execute cmd1 and will pass the output of cmd1 (taken from stdout) as input to cmd2 (in stdin).
  
  `-> | cmd1 | -> (stdout) | PIPE | -> (stdin) -> | cmd2 | ->`
  
  ##### xargs
  Used to pass values as argument of a program.
  `find . -name "*.bak" -type f -print | xargs /bin/rm -f`: delete all files with extension `.bak`
  
  *NOTE*: pipe will send the stdout of the previous program to the stdin of the second program, xargs will pass the input passed to it in stdin as __argument__ of the program passed to it as argument
  
  ##### redirection
  Used to redirect output of a command to file or to take a file as stdin.
  ex
  `echo "ciao" > file` prints ciao in file
  `echo "ciao" >> file` appends ciao in file
  `find / -name "*.desktop" 2> /dev/null` prints on screen the result of find but redirect stderr to /dev/null
  `grep * 1>&2` redirect stdout to stderr
  `grep * &> file` redirect both stderr and stdout to file
  `cat 0>&1` redirect stdin to stdout (an echo! every string is duplicated)
  `grep ciao < file` execute grep on file
  
  ##### back quotes
  A command wrapped in back quotes will be precomputed before executing the whole command
  ex
  ``echo `ls -l` `` will print the content of pwd
  
  ---
  
  ##### bc
  Terminal calculator. 
  *NOTE:* When you change the input base, you have to be careful: `ibase=16;obase=10` will set the obase to 16! since 10 in base 16 is 16.
  
  ex
  `echo "ibase=16;NUMERO_BASE_16" | bc` convert number from base 16 to base 10
  `echo "obase=16;NUMERO_BASE_10" | bc` convert number from base 10 to base 16
  ``echo "obase=16;`echo $?`" | bc `` convert the result of `echo $?` to base 16 (`echo $?` prints the value that the last program executed returned to the OS)
'''
tags: [
  "shell"
  "commands"
  "unix"
]
isStarred: false
createdAt: "2017-05-29T20:57:36.984Z"
updatedAt: "2018-06-15T16:52:27.425Z"
